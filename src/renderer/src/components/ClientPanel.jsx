// import { useEffect, useState, useRef } from 'react';
// import ProductCard from './ProductCard';
// import "../styles/ProductList.css";  // –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª–∏ –æ—Ç ProductList –¥–ª—è‰∏ÄËá¥–Ω–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞

// function ClientPanel({ user }) {  // –ü—Ä–∏–Ω–∏–º–∞–µ–º user –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏
//   const [products, setProducts] = useState([]);
//   const [filteredProducts, setFilteredProducts] = useState([]);  // –î–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
//   const [isReady, setIsReady] = useState(false);
//   const [searchQuery, setSearchQuery] = useState('');  // –î–ª—è –ø–æ–∏—Å–∫–∞
//   const [sortBy, setSortBy] = useState('name');  // –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–ø–æ –∏–º–µ–Ω–∏, —Ü–µ–Ω–µ)
//   const [filterCategory, setFilterCategory] = useState('');  // –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
//   const containerRef = useRef(null);
//   const initialized = useRef(false);

//   // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
//   const showControls = true;

//   // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –û–î–ò–ù —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ ProductList)
//   useEffect(() => {
//     if (initialized.current) return;
//     initialized.current = true;

//     console.log('üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞');

//     const loadProducts = async () => {
//       try {
//         const productsData = await window.api.getProducts();
//         console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', productsData.length, '—Ç–æ–≤–∞—Ä–æ–≤');

//         // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ –≤ –ë–î)
//         setProducts(productsData || []);
//         setFilteredProducts(productsData || []);  // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã

//         // –î–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É DOM
//         requestAnimationFrame(() => {
//           requestAnimationFrame(() => {
//             console.log('üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç');
//             setIsReady(true);
//           });
//         });

//       } catch (error) {
//         console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
//         setProducts([]);
//         setFilteredProducts([]);
//         setIsReady(true);
//       }
//     };

//     loadProducts();
//   }, []);

//   // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞)
//   useEffect(() => {
//     let filtered = products;

//     // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é (–∏—Å–ø–æ–ª—å–∑—É–µ–º product_name –¥–ª—è consistency —Å ProductCard)
//     if (searchQuery) {
//       filtered = filtered.filter(product =>
//         product.product_name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
//         product.description?.toLowerCase().includes(searchQuery.toLowerCase())
//       );
//     }

//     // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º category_name –∏–ª–∏ category ‚Äì –∞–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)
//     if (filterCategory) {
//       filtered = filtered.filter(product => product.category_name === filterCategory || product.category === filterCategory);
//     }

//     // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
//     filtered.sort((a, b) => {
//       if (sortBy === 'name') {
//         return a.product_name?.localeCompare(b.product_name) || 0;
//       } else if (sortBy === 'price') {
//         return (Number(a.price) || 0) - (Number(b.price) || 0);
//       }
//       return 0;
//     });

//     setFilteredProducts(filtered);
//   }, [products, searchQuery, sortBy, filterCategory]);

//   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
//   const handleSearchChange = (e) => setSearchQuery(e.target.value);
//   const handleSortChange = (e) => setSortBy(e.target.value);
//   const handleFilterChange = (e) => setFilterCategory(e.target.value);

//   // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π loading (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ ProductList)
//   if (!isReady) {
//     return (
//       <div 
//         ref={containerRef}
//         className="product-list-container product-list-container--loading"
//         style={{
//           opacity: 1,
//           transform: 'none',
//           animation: 'none'
//         }}
//       >
//         <div className="loading-state">
//           <h2>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞...</h2>
//           <div className="loading-placeholder">
//             –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
//           </div>
//         </div>
//       </div>
//     );
//   }

//   // –ö–æ–≥–¥–∞ –≤—Å–µ –≥–æ—Ç–æ–≤–æ - —Ä–µ–Ω–¥–µ—Ä–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (–ø–æ—Ö–æ–∂ –Ω–∞ ProductList –¥–ª—è –≥–æ—Å—Ç–µ–π, –Ω–æ —Å controls)
//   return (
//     <div 
//       ref={containerRef}
//       className="product-list-container product-list-container--ready"
//       style={{
//         opacity: 1,
//         transform: 'none', 
//         animation: 'none'
//       }}
//     >
//       <h2>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</h2>

//       {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏) */}
//       {user && (
//         <div className="client-greeting">
//           –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.name}! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã.
//         </div>
//       )}

//       {/* –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –ø–æ–∏—Å–∫, —Ñ–∏–ª—å—Ç—Ä—ã, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ - –≤—Å–µ–≥–¥–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ */}
//       <div className="controls">
//         <div className="search">
//           <input
//             type="text"
//             placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é..."
//             value={searchQuery}
//             onChange={handleSearchChange}
//           />
//         </div>
//         <div className="filters">
//           <select value={filterCategory} onChange={handleFilterChange}>
//             <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
//             {/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ products –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã */}
//             {[...new Set(products.map(p => p.category_name || p.category))].filter(cat => cat).map(cat => (
//               <option key={cat} value={cat}>{cat}</option>
//             ))}
//             {/* –ò–ª–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ: <option value="–û–±—É–≤—å">–û–±—É–≤—å</option> */}
//           </select>
//         </div>
//         <div className="sort">
//           <select value={sortBy} onChange={handleSortChange}>
//             <option value="name">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</option>
//             <option value="price">–ü–æ —Ü–µ–Ω–µ</option>
//           </select>
//         </div>
//       </div>

//       <div className="products-grid">
//         {filteredProducts.map((product) => (
//           <ProductCard 
//             key={product.product_article} 
//             product={product}
//           />
//         ))}
//       </div>
//       {filteredProducts.length === 0 && (
//         <div className="no-products">
//           {products.length === 0 ? '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}
//         </div>
//       )}
//     </div>
//   );
// }

// export default ClientPanel;



























// import { useEffect, useState, useRef } from 'react';
// import { useNavigate } from 'react-router-dom';  // –î–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
// import ProductCard from './ProductCard';
// import "../styles/ClientPanel.css";

// function ClientPanel({ user, setUser }) {  // –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º setUser –¥–ª—è –≤—ã—Ö–æ–¥–∞
// 	const navigate = useNavigate();
// 	const [products, setProducts] = useState([]);
// 	const [filteredProducts, setFilteredProducts] = useState([]);  // –î–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
// 	const [isReady, setIsReady] = useState(false);
// 	const [searchQuery, setSearchQuery] = useState('');  // –î–ª—è –ø–æ–∏—Å–∫–∞
// 	const [sortBy, setSortBy] = useState('name');  // –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–ø–æ –∏–º–µ–Ω–∏, —Ü–µ–Ω–µ)
// 	const [filterCategory, setFilterCategory] = useState('');  // –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
// 	const containerRef = useRef(null);
// 	const initialized = useRef(false);

// 	// –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
// 	const showControls = true;

// 	// –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º user –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—Ö–æ–¥
// 	const handleLogout = () => {
// 		setUser({ role: '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', name: null });  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
// 		navigate('/');  // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
// 	};

// 	// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –û–î–ò–ù —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ ProductList)
// 	useEffect(() => {
// 		if (initialized.current) return;
// 		initialized.current = true;

// 		console.log('üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞');

// 		const loadProducts = async () => {
// 			try {
// 				const productsData = await window.api.getProducts();
// 				console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', productsData.length, '—Ç–æ–≤–∞—Ä–æ–≤');

// 				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ –≤ –ë–î)
// 				setProducts(productsData || []);
// 				setFilteredProducts(productsData || []);  // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã

// 				// –î–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É DOM
// 				requestAnimationFrame(() => {
// 					requestAnimationFrame(() => {
// 						console.log('üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç');
// 						setIsReady(true);
// 					});
// 				});

// 			} catch (error) {
// 				console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
// 				setProducts([]);
// 				setFilteredProducts([]);
// 				setIsReady(true);
// 			}
// 		};

// 		loadProducts();
// 	}, []);

// 	// –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞)
// 	useEffect(() => {
// 		let filtered = products;

// 		// –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é (–∏—Å–ø–æ–ª—å–∑—É–µ–º product_name –¥–ª—è consistency —Å ProductCard)
// 		if (searchQuery) {
// 			filtered = filtered.filter(product =>
// 				product.product_name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
// 				product.description?.toLowerCase().includes(searchQuery.toLowerCase())
// 			);
// 		}

// 		// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º category_name –∏–ª–∏ category ‚Äì –∞–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)
// 		if (filterCategory) {
// 			filtered = filtered.filter(product => product.category_name === filterCategory || product.category === filterCategory);
// 		}

// 		// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
// 		filtered.sort((a, b) => {
// 			if (sortBy === 'name') {
// 				return a.product_name?.localeCompare(b.product_name) || 0;
// 			} else if (sortBy === 'price') {
// 				return (Number(a.price) || 0) - (Number(b.price) || 0);
// 			}
// 			return 0;
// 		});

// 		setFilteredProducts(filtered);
// 	}, [products, searchQuery, sortBy, filterCategory]);

// 	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
// 	const handleSearchChange = (e) => setSearchQuery(e.target.value);
// 	const handleSortChange = (e) => setSortBy(e.target.value);
// 	const handleFilterChange = (e) => setFilterCategory(e.target.value);

// 	// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π loading (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ ProductList)
// 	if (!isReady) {
// 		return (
// 			<div
// 				ref={containerRef}
// 				className="product-list-container product-list-container--loading"
// 				style={{
// 					opacity: 1,
// 					transform: 'none',
// 					animation: 'none'
// 				}}
// 			>
// 				<div className="loading-state">
// 					<h2>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞...</h2>
// 					<div className="loading-placeholder">
// 						–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
// 					</div>
// 				</div>
// 			</div>
// 		);
// 	}

// 	// –ö–æ–≥–¥–∞ –≤—Å–µ –≥–æ—Ç–æ–≤–æ - —Ä–µ–Ω–¥–µ—Ä–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
// 	return (
// 		<div
// 			ref={containerRef}
// 			className="product-list-container product-list-container--ready"
// 			style={{
// 				opacity: 1,
// 				transform: 'none',
// 				animation: 'none'
// 			}}
// 		>




// 			{user && user.role !== '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' && (
// 				<div className="header">
// 					<div className="user-info">
// 						<span className="user-info-label">–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</span>
// 						<span className="user-info-role">
// 							{user.name} ({user.role})
// 						</span>
// 					</div>
// 					<div className="logout-container">
// 						<button className="logout-btn" onClick={handleLogout}>
// 							–í—ã—Ö–æ–¥
// 						</button>
// 					</div>
// 				</div>
// 			)}

// 			<h2> </h2>



// 			{/* –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –ø–æ–∏—Å–∫, —Ñ–∏–ª—å—Ç—Ä—ã, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ - –≤—Å–µ–≥–¥–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ */}
// 			<div className="controls">
// 				<div className="search">
// 					<input
// 						type="text"
// 						placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é..."
// 						value={searchQuery}
// 						onChange={handleSearchChange}
// 					/>
// 				</div>
// 				<div className="filters">
// 					<select value={filterCategory} onChange={handleFilterChange}>
// 						<option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
// 						{/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ products –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã */}
// 						{[...new Set(products.map(p => p.category_name || p.category))].filter(cat => cat).map(cat => (
// 							<option key={cat} value={cat}>{cat}</option>
// 						))}
// 						{/* –ò–ª–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ: <option value="–û–±—É–≤—å">–û–±—É–≤—å</option> */}
// 					</select>
// 				</div>
// 				<div className="sort">
// 					<select value={sortBy} onChange={handleSortChange}>
// 						<option value="name">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</option>
// 						<option value="price">–ü–æ —Ü–µ–Ω–µ</option>
// 					</select>
// 				</div>
// 			</div>

// 			<div className="products-grid">
// 				{filteredProducts.map((product) => (
// 					<ProductCard
// 						key={product.product_article}
// 						product={product}
// 					/>
// 				))}
// 			</div>
// 			{filteredProducts.length === 0 && (
// 				<div className="no-products">
// 					{products.length === 0 ? '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}
// 				</div>
// 			)}
// 		</div>
// 	);
// }

// export default ClientPanel;






































// import { useEffect, useState, useRef } from 'react';
// import { useNavigate } from 'react-router-dom';
// import ProductCard from './ProductCard';
// import "../styles/ClientPanel.css";

// function ClientPanel({ user, setUser }) {
// 	const navigate = useNavigate();
// 	const [products, setProducts] = useState([]);
// 	const [filteredProducts, setFilteredProducts] = useState([]);
// 	const [isReady, setIsReady] = useState(false);
// 	const [searchQuery, setSearchQuery] = useState('');
// 	const [sortBy, setSortBy] = useState('name');
// 	const [filterCategory, setFilterCategory] = useState('');
// 	const containerRef = useRef(null);
// 	const initialized = useRef(false);

// 	const showControls = true;

// 	const handleLogout = () => {
// 		setUser({ role: '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', name: null });
// 		navigate('/');
// 	};

// 	useEffect(() => {
// 		if (initialized.current) return;
// 		initialized.current = true;

// 		console.log('üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞');

// 		const loadProducts = async () => {
// 			try {
// 				const productsData = await window.api.getProducts();
// 				console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', productsData.length, '—Ç–æ–≤–∞—Ä–æ–≤');

// 				setProducts(productsData || []);
// 				setFilteredProducts(productsData || []);

// 				requestAnimationFrame(() => {
// 					requestAnimationFrame(() => {
// 						console.log('üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç');
// 						setIsReady(true);
// 					});
// 				});

// 			} catch (error) {
// 				console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
// 				setProducts([]);
// 				setFilteredProducts([]);
// 				setIsReady(true);
// 			}
// 		};

// 		loadProducts();
// 	}, []);

// 	useEffect(() => {
// 		let filtered = products;

// 		if (searchQuery) {
// 			filtered = filtered.filter(product =>
// 				product.product_name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
// 				product.description?.toLowerCase().includes(searchQuery.toLowerCase())
// 			);
// 		}

// 		if (filterCategory) {
// 			filtered = filtered.filter(product => product.category_name === filterCategory || product.category === filterCategory);
// 		}

// 		filtered.sort((a, b) => {
// 			if (sortBy === 'name') {
// 				return a.product_name?.localeCompare(b.product_name) || 0;
// 			} else if (sortBy === 'price') {
// 				return (Number(a.price) || 0) - (Number(b.price) || 0);
// 			}
// 			return 0;
// 		});

// 		setFilteredProducts(filtered);
// 	}, [products, searchQuery, sortBy, filterCategory]);

// 	const handleSearchChange = (e) => setSearchQuery(e.target.value);
// 	const handleSortChange = (e) => setSortBy(e.target.value);
// 	const handleFilterChange = (e) => setFilterCategory(e.target.value);

// 	if (!isReady) {
// 		return (
// 			<div
// 				ref={containerRef}
// 				className="client-panel-container client-panel-container--loading"
// 			>
// 				<div className="loading-state">
// 					<h2>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞...</h2>
// 					<div className="loading-placeholder">
// 						–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
// 					</div>
// 				</div>
// 			</div>
// 		);
// 	}

// 	return (
// 		<>
// 			{/* Header –≤—ã–Ω–µ—Å–µ–Ω –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */}
// 			{user && user.role !== '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' && (
// 				<div className="client-panel-header">
// 					<div className="user-info">
// 						<span className="user-info-label">–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</span>
// 						<span className="user-info-role">
// 							{user.name} ({user.role})
// 						</span>
// 					</div>
// 					<div className="logout-container">
// 						<button className="logout-btn" onClick={handleLogout}>
// 							–í—ã—Ö–æ–¥
// 						</button>
// 					</div>
// 				</div>
// 			)}

// 			{/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
// 			<div
// 				ref={containerRef}
// 				className="client-panel-container client-panel-container--ready"
// 			>
// 				<h2> </h2>

// 				{/* –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –ø–æ–∏—Å–∫, —Ñ–∏–ª—å—Ç—Ä—ã, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ - –≤—Å–µ–≥–¥–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ */}
// 				<div className="controls">
// 					<div className="search">
// 						<input
// 							type="text"
// 							placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é..."
// 							value={searchQuery}
// 							onChange={handleSearchChange}
// 						/>
// 					</div>
// 					<div className="filters">
// 						<select value={filterCategory} onChange={handleFilterChange}>
// 							<option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
// 							{[...new Set(products.map(p => p.category_name || p.category))].filter(cat => cat).map(cat => (
// 								<option key={cat} value={cat}>{cat}</option>
// 							))}
// 						</select>
// 					</div>
// 					<div className="sort">
// 						<select value={sortBy} onChange={handleSortChange}>
// 							<option value="name">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</option>
// 							<option value="price">–ü–æ —Ü–µ–Ω–µ</option>
// 						</select>
// 					</div>
// 				</div>

// 				<div className="products-grid">
// 					{filteredProducts.map((product) => (
// 						<ProductCard
// 							key={product.product_article}
// 							product={product}
// 						/>
// 					))}
// 				</div>
// 				{filteredProducts.length === 0 && (
// 					<div className="no-products">
// 						{products.length === 0 ? '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}
// 					</div>
// 				)}
// 			</div>
// 		</>
// 	);
// }

// export default ClientPanel;




































// import { useEffect, useState, useRef } from 'react';
// import { useNavigate } from 'react-router-dom';  // –î–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
// import ProductCard from './ProductCard';
// import "../styles/ClientPanel.css";

// function ClientPanel({ user, setUser }) {  // –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º setUser –¥–ª—è –≤—ã—Ö–æ–¥–∞
// 	const navigate = useNavigate();
// 	const [products, setProducts] = useState([]);
// 	const [filteredProducts, setFilteredProducts] = useState([]);  // –î–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
// 	const [isReady, setIsReady] = useState(false);
// 	const [searchQuery, setSearchQuery] = useState('');  // –î–ª—è –ø–æ–∏—Å–∫–∞
// 	const [sortBy, setSortBy] = useState('name');  // –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–ø–æ –∏–º–µ–Ω–∏, —Ü–µ–Ω–µ)
// 	const [filterCategory, setFilterCategory] = useState('');  // –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
// 	const containerRef = useRef(null);
// 	const initialized = useRef(false);

// 	// –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
// 	const showControls = true;

// 	// –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º user –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—Ö–æ–¥
// 	const handleLogout = () => {
// 		setUser({ role: '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', name: null });  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
// 		navigate('/');  // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
// 	};

// 	// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –û–î–ò–ù —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ ProductList)
// 	useEffect(() => {
// 		if (initialized.current) return;
// 		initialized.current = true;

// 		console.log('üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞');

// 		const loadProducts = async () => {
// 			try {
// 				const productsData = await window.api.getProducts();
// 				console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', productsData.length, '—Ç–æ–≤–∞—Ä–æ–≤');

// 				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ –≤ –ë–î)
// 				setProducts(productsData || []);
// 				setFilteredProducts(productsData || []);  // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã

// 				// –î–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É DOM
// 				requestAnimationFrame(() => {
// 					requestAnimationFrame(() => {
// 						console.log('üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç');
// 						setIsReady(true);
// 					});
// 				});

// 			} catch (error) {
// 				console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
// 				setProducts([]);
// 				setFilteredProducts([]);
// 				setIsReady(true);
// 			}
// 		};

// 		loadProducts();
// 	}, []);

// 	// –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞)
// 	useEffect(() => {
// 		let filtered = products;

// 		// –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é (–∏—Å–ø–æ–ª—å–∑—É–µ–º product_name –¥–ª—è consistency —Å ProductCard)
// 		if (searchQuery) {
// 			filtered = filtered.filter(product =>
// 				product.product_name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
// 				product.description?.toLowerCase().includes(searchQuery.toLowerCase())
// 			);
// 		}

// 		// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º category_name –∏–ª–∏ category ‚Äì –∞–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)
// 		if (filterCategory) {
// 			filtered = filtered.filter(product => product.category_name === filterCategory || product.category === filterCategory);
// 		}

// 		// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
// 		filtered.sort((a, b) => {
// 			if (sortBy === 'name') {
// 				return a.product_name?.localeCompare(b.product_name) || 0;
// 			} else if (sortBy === 'price') {
// 				return (Number(a.price) || 0) - (Number(b.price) || 0);
// 			}
// 			return 0;
// 		});

// 		setFilteredProducts(filtered);
// 	}, [products, searchQuery, sortBy, filterCategory]);

// 	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
// 	const handleSearchChange = (e) => setSearchQuery(e.target.value);
// 	const handleSortChange = (e) => setSortBy(e.target.value);
// 	const handleFilterChange = (e) => setFilterCategory(e.target.value);

// 	// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π loading (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ ProductList)
// 	if (!isReady) {
// 		return (
// 			<div
// 				ref={containerRef}
// 				className="product-list-container product-list-container--loading"
// 				style={{
// 					opacity: 1,
// 					transform: 'none',
// 					animation: 'none'
// 				}}
// 			>
// 				<div className="loading-state">
// 					<h2>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞...</h2>
// 					<div className="loading-placeholder">
// 						–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
// 					</div>
// 				</div>
// 			</div>
// 		);
// 	}

// 	// –ö–æ–≥–¥–∞ –≤—Å–µ –≥–æ—Ç–æ–≤–æ - —Ä–µ–Ω–¥–µ—Ä–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
// 	return (
// 		<div
// 			ref={containerRef}
// 			className="product-list-container product-list-container--ready"
// 			style={{
// 				opacity: 1,
// 				transform: 'none',
// 				animation: 'none'
// 			}}
// 		>




// 			{user && user.role !== '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' && (
// 				<div className="header">
// 					<div className="user-info">
// 						<span className="user-info-label">–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</span>
// 						<span className="user-info-role">
// 							{user.name} ({user.role})
// 						</span>
// 					</div>
// 					<div className="logout-container">
// 						<button className="logout-btn" onClick={handleLogout}>
// 							–í—ã—Ö–æ–¥
// 						</button>
// 					</div>
// 				</div>
// 			)}

// 			<h2> </h2>



// 			{/* –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –ø–æ–∏—Å–∫, —Ñ–∏–ª—å—Ç—Ä—ã, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ - –≤—Å–µ–≥–¥–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ */}
// 			<div className="controls">
// 				<div className="search">
// 					<input
// 						type="text"
// 						placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é..."
// 						value={searchQuery}
// 						onChange={handleSearchChange}
// 					/>
// 				</div>
// 				<div className="filters">
// 					<select value={filterCategory} onChange={handleFilterChange}>
// 						<option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
// 						{/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ products –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã */}
// 						{[...new Set(products.map(p => p.category_name || p.category))].filter(cat => cat).map(cat => (
// 							<option key={cat} value={cat}>{cat}</option>
// 						))}
// 						{/* –ò–ª–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ: <option value="–û–±—É–≤—å">–û–±—É–≤—å</option> */}
// 					</select>
// 				</div>
// 				<div className="sort">
// 					<select value={sortBy} onChange={handleSortChange}>
// 						<option value="name">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</option>
// 						<option value="price">–ü–æ —Ü–µ–Ω–µ</option>
// 					</select>
// 				</div>
// 			</div>

// 			<div className="products-grid">
// 				{filteredProducts.map((product) => (
// 					<ProductCard
// 						key={product.product_article}
// 						product={product}
// 					/>
// 				))}
// 			</div>
// 			{filteredProducts.length === 0 && (
// 				<div className="no-products">
// 					{products.length === 0 ? '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}
// 				</div>
// 			)}
// 		</div>
// 	);
// }

// export default ClientPanel;




































import { useEffect, useState, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import ProductCard from './ProductCard';
import "../styles/ClientPanel.css";

function ClientPanel({ user, setUser }) {
	const navigate = useNavigate();
	const [products, setProducts] = useState([]);
	const [filteredProducts, setFilteredProducts] = useState([]);
	const [isReady, setIsReady] = useState(false);
	const [searchQuery, setSearchQuery] = useState('');
	const [sortBy, setSortBy] = useState('name');
	const [filterCategory, setFilterCategory] = useState('');
	const containerRef = useRef(null);
	const initialized = useRef(false);


	const showControls = true;


	const handleLogout = () => {
		setUser({ role: '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', name: null });
		navigate('/');
	};


	useEffect(() => {
		if (initialized.current) return;
		initialized.current = true;

		console.log('üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞');

		const loadProducts = async () => {
			try {
				const productsData = await window.api.getProducts();
				console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', productsData.length, '—Ç–æ–≤–∞—Ä–æ–≤');


				setProducts(productsData || []);
				setFilteredProducts(productsData || []);


				requestAnimationFrame(() => {
					requestAnimationFrame(() => {
						console.log('üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç');
						setIsReady(true);
					});
				});

			} catch (error) {
				console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
				setProducts([]);
				setFilteredProducts([]);
				setIsReady(true);
			}
		};

		loadProducts();
	}, []);


	useEffect(() => {
		let filtered = products;


		if (searchQuery) {
			filtered = filtered.filter(product =>
				product.product_name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
				product.description?.toLowerCase().includes(searchQuery.toLowerCase())
			);
		}


		if (filterCategory) {
			filtered = filtered.filter(product => product.category_name === filterCategory || product.category === filterCategory);
		}


		filtered.sort((a, b) => {
			if (sortBy === 'name') {
				return a.product_name?.localeCompare(b.product_name) || 0;
			} else if (sortBy === 'price') {
				return (Number(a.price) || 0) - (Number(b.price) || 0);
			}
			return 0;
		});

		setFilteredProducts(filtered);
	}, [products, searchQuery, sortBy, filterCategory]);


	const handleSearchChange = (e) => setSearchQuery(e.target.value);
	const handleSortChange = (e) => setSortBy(e.target.value);
	const handleFilterChange = (e) => setFilterCategory(e.target.value);


	if (!isReady) {
		return (
			<div
				ref={containerRef}
				className="product-list-container product-list-container--loading"
				style={{
					opacity: 1,
					transform: 'none',
					animation: 'none'
				}}
			>
				<div className="loading-state">
					<h2>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞...</h2>
					<div className="loading-placeholder">
						–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
					</div>
				</div>
			</div>
		);
	}

	return (

		<>

			<div>
				{user && user.role !== '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' && (
					<div className="compact-header">
						<div className="user-compact-info">
							<div className="user-name">{user.name}</div>
							<div className="user-role">{user.role}</div>
						</div>
						<button className="logout-btn-compact" onClick={handleLogout}>
							–í—ã—Ö–æ–¥
						</button>
					</div>
				)}
			</div>


			<div className="client-panel-wrapper">




				<div
					ref={containerRef}
					className="product-list-container product-list-container--ready"
				>
					<h2> </h2>


					<div className="controls">

					</div>

					<div className="products-grid">
						{filteredProducts.map((product) => (
							<ProductCard
								key={product.product_article}
								product={product}
							/>
						))}
					</div>
					{filteredProducts.length === 0 && (
						<div className="no-products">
							{products.length === 0 ? '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}
						</div>
					)}
				</div>
			</div>
		</>
	);

}

export default ClientPanel;

