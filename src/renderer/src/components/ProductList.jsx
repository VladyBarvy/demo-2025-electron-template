// import { useEffect, useState } from 'react';
// import ProductCard from './ProductCard';
// import "../styles/ProductList.css";

// function ProductList() {
//   const [products, setProducts] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState(null);

//   useEffect(() => {
//     async function loadProducts() {
//       try {
//         if (!window.api || !window.api.getProducts) {
//           throw new Error('API method not available');
//         }

//         const productsData = await window.api.getProducts();

//         // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
//         console.log('Received products data:', productsData);
//         if (productsData && productsData.length > 0) {
//           console.log('First product sample:', productsData[0]);
//           console.log('Price type:', typeof productsData[0].price);
//           console.log('Price value:', productsData[0].price);
//         }

//         setProducts(productsData);
//       } catch (err) {
//         console.error('Error loading products:', err);
//         setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
//       } finally {
//         setLoading(false);
//       }
//     }

//     loadProducts();
//   }, []);

//   if (loading) {
//     return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</div>;
//   }

//   if (error) {
//     return (
//       <div className="error-container">
//         <div className="error">{error}</div>
//         <button onClick={() => window.location.reload()} className="retry-button">
//           –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
//         </button>
//       </div>
//     );
//   }

//   return (
//     <div className="product-list-container">
//       <h2>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</h2>
//       <div className="products-grid">
//         {products.map(product => (
//           <ProductCard key={product.product_article} product={product} />
//         ))}
//       </div>
//     </div>
//   );
// }

// export default ProductList;














// import { useEffect, useState, useRef } from 'react';
// import ProductCard from './ProductCard';
// import "../styles/ProductList.css";

// function ProductList() {
//   const [state, setState] = useState({
//     products: null,
//     loading: true,
//     error: null
//   });

//   const hasLoaded = useRef(false);

//   useEffect(() => {
//     if (hasLoaded.current) return;
//     hasLoaded.current = true;

//     async function loadProducts() {
//       try {
//         if (!window.api || !window.api.getProducts) {
//           throw new Error('API method not available');
//         }

//         console.log('Loading products...');
//         const productsData = await window.api.getProducts();

//         setState({
//           products: productsData,
//           loading: false,
//           error: null
//         });
//       } catch (err) {
//         console.error('Error loading products:', err);
//         setState({
//           products: null,
//           loading: false,
//           error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.'
//         });
//       }
//     }

//     loadProducts();
//   }, []);

//   console.log('ProductList rendered, loading:', state.loading, 'products:', state.products?.length);

//   if (state.loading || state.products === null) {
//     return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</div>;
//   }

//   if (state.error) {
//     return (
//       <div className="error-container">
//         <div className="error">{state.error}</div>
//         <button onClick={() => window.location.reload()} className="retry-button">
//           –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
//         </button>
//       </div>
//     );
//   }

//   return (
//     <div className="product-list-container">
//       <h2>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</h2>
//       <div className="products-grid">
//         {state.products.map(product => (
//           <ProductCard 
//             key={product.product_article} 
//             product={product} 
//           />
//         ))}
//       </div>
//     </div>
//   );
// }

// export default ProductList;















// import { useEffect, useState } from 'react';
// import ProductCard from './ProductCard';
// import "../styles/ProductList.css";

// function ProductList() {
//   const [products, setProducts] = useState([]); // –ü—Ä–æ—Å—Ç–æ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤

//   useEffect(() => {
//     let isMounted = true;

//     async function loadProducts() {
//       try {
//         const productsData = await window.api.getProducts();
//         if (isMounted) {
//           setProducts(productsData || []); // –û–¥–∏–Ω —Ä–∞–∑ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
//         }
//       } catch (err) {
//         console.error('Error loading products:', err);
//         if (isMounted) {
//           setProducts([]); // –û–¥–∏–Ω —Ä–∞–∑ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
//         }
//       }
//     }

//     loadProducts();

//     return () => {
//       isMounted = false; // –ó–∞—â–∏—Ç–∞ –æ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
//     };
//   }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

//   return (
//     <div className="product-list-container">
//       <h2>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</h2>
//       <div className="products-grid">
//         {products.map(product => (
//           <ProductCard 
//             key={product.product_article} 
//             product={product} 
//           />
//         ))}
//       </div>
//     </div>
//   );
// }

// export default ProductList;














// import { useEffect, useState } from 'react';
// import ProductCard from './ProductCard';
// import "../styles/ProductList.css";

// function ProductList() {
//   const [products, setProducts] = useState([]);

//   useEffect(() => {
//     let isMounted = true;

//     async function loadProducts() {
//       try {
//         const productsData = await window.api.getProducts();
//         if (isMounted) {
//           // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ü–ï–†–í–´–ô —Ç–æ–≤–∞—Ä
//           const firstProduct = productsData && productsData.length > 0 
//             ? [productsData[0]] 
//             : [];
//           setProducts(firstProduct);
//           console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä:', firstProduct[0]?.product_name);
//         }
//       } catch (err) {
//         console.error('Error loading products:', err);
//         if (isMounted) {
//           setProducts([]);
//         }
//       }
//     }

//     loadProducts();

//     return () => {
//       isMounted = false;
//     };
//   }, []);

//   console.log('üîÑ ProductList —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è, —Ç–æ–≤–∞—Ä–æ–≤:', products.length);

//   return (
//     <div className="product-list-container">
//       <h2>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ (–¢–ï–°–¢: 1 —Ç–æ–≤–∞—Ä)</h2>
//       <div className="products-grid">
//         {products.map(product => (
//           <ProductCard 
//             key={product.product_article} 
//             product={product} 
//           />
//         ))}
//       </div>
//       {products.length === 0 && <div>–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>}
//     </div>
//   );
// }

// export default ProductList;
























// import { useEffect, useState, useRef } from 'react';
// import ProductCard from './ProductCard';
// import "../styles/ProductList.css";

// function ProductList() {
//   const [products, setProducts] = useState([]);
//   const initialized = useRef(false);

//   useEffect(() => {
//     // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –≤ Strict Mode
//     if (initialized.current) return;
//     initialized.current = true;

//     console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–≤–∞—Ä–æ–≤');

//     async function loadProducts() {
//       try {
//         const productsData = await window.api.getProducts();
//         console.log('‚úÖ –¢–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

//         // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è —Ç–µ—Å—Ç–∞
//         const firstProduct = productsData && productsData.length > 0 
//           ? [productsData[0]] 
//           : [];
//         setProducts(firstProduct);

//       } catch (err) {
//         console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err);
//         setProducts([]);
//       }
//     }

//     loadProducts();
//   }, []);

//   console.log('üîÑ ProductList —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è, —Ç–æ–≤–∞—Ä–æ–≤:', products.length);

//   return (
//     <div className="product-list-container">
//       <h2>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ (–¢–ï–°–¢: 1 —Ç–æ–≤–∞—Ä)</h2>
//       <div className="products-grid">
//         {products.map(product => (
//           <ProductCard 
//             key={product.product_article} 
//             product={product} 
//           />
//         ))}
//       </div>
//       {products.length === 0 && <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>}
//     </div>
//   );
// }

// export default ProductList;










// import ProductCard from './ProductCard';
// import "../styles/ProductList.css";

// // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ —Å –æ–¥–Ω–∏–º —Ç–æ–≤–∞—Ä–æ–º –¥–ª—è —Ç–µ—Å—Ç–∞
// const testProduct = [{
//   product_article: 'TEST001',
//   product_name: '–¢–µ—Å—Ç–æ–≤—ã–µ –±–æ—Ç–∏–Ω–∫–∏',
//   price: 5000,
//   current_discount: 10,
//   quantity_in_stock: 5,
//   description: '–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
//   photo_url: '',
//   category_name: '–û–±—É–≤—å',
//   manufacturer_name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å',
//   supplier_name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫',
//   unit_of_measure: '—à—Ç.'
// }];

// function ProductList() {
//   console.log('üîÑ ProductList —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è)');

//   return (
//     <div className="product-list-container">
//       <h2>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ (–°–¢–ê–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢)</h2>
//       <div className="products-grid">
//         {testProduct.map(product => (
//           <ProductCard 
//             key={product.product_article} 
//             product={product} 
//           />
//         ))}
//       </div>
//     </div>
//   );
// }

// export default ProductList;






















// import { useEffect, useState, useRef } from 'react';
// import ProductCard from './ProductCard';
// import "../styles/ProductList.css";

// function ProductList() {
//   const [products, setProducts] = useState([]);
//   const [isReady, setIsReady] = useState(false);
//   const containerRef = useRef(null);
//   const initialized = useRef(false);

//   // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –û–î–ò–ù —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
//   useEffect(() => {
//     if (initialized.current) return;
//     initialized.current = true;

//     console.log('üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');

//     const loadProducts = async () => {
//       try {
//         const productsData = await window.api.getProducts();
//         console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', productsData.length, '—Ç–æ–≤–∞—Ä–æ–≤');

//         // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
//         setProducts(productsData || []);

//         // –î–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É DOM
//         requestAnimationFrame(() => {
//           requestAnimationFrame(() => {
//             console.log('üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç');
//             setIsReady(true);
//           });
//         });

//       } catch (error) {
//         console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
//         setProducts([]);
//         setIsReady(true);
//       }
//     };

//     loadProducts();
//   }, []);

//   // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π loading
//   if (!isReady) {
//     return (
//       <div 
//         ref={containerRef}
//         className="product-list-container product-list-container--loading"
//         style={{
//           opacity: 1,
//           transform: 'none',
//           animation: 'none'
//         }}
//       >
//         <div className="loading-state">
//           <h2>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞...</h2>
//           <div className="loading-placeholder">
//             –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
//           </div>
//         </div>
//       </div>
//     );
//   }

//   // –ö–æ–≥–¥–∞ –≤—Å–µ –≥–æ—Ç–æ–≤–æ - —Ä–µ–Ω–¥–µ—Ä–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
//   return (
//     <div 
//       ref={containerRef}
//       className="product-list-container product-list-container--ready"
//       style={{
//         opacity: 1,
//         transform: 'none', 
//         animation: 'none'
//       }}
//     >
//       <h2>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</h2>
//       <div className="products-grid">
//         {products.map((product, index) => (
//           <ProductCard 
//             key={product.product_article} 
//             product={product}
//             index={index}
//           />
//         ))}
//       </div>
//       {products.length === 0 && (
//         <div className="no-products">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
//       )}
//     </div>
//   );
// }

// export default ProductList;


































































// import { useEffect, useState, useRef } from 'react';
// import ProductCard from './ProductCard';
// import "../styles/ProductList.css";

// function ProductList() {
//   const [products, setProducts] = useState([]);
//   const [isReady, setIsReady] = useState(false);
//   const containerRef = useRef(null);
//   const initialized = useRef(false);

//   // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –û–î–ò–ù —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
//   useEffect(() => {
//     if (initialized.current) return;
//     initialized.current = true;

//     console.log('üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');

//     const loadProducts = async () => {
//       try {
//         const productsData = await window.api.getProducts();
//         console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', productsData.length, '—Ç–æ–≤–∞—Ä–æ–≤');

//         // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ –≤ –ë–î)
//         setProducts(productsData || []);

//         // –î–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É DOM
//         requestAnimationFrame(() => {
//           requestAnimationFrame(() => {
//             console.log('üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç');
//             setIsReady(true);
//           });
//         });

//       } catch (error) {
//         console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
//         setProducts([]);
//         setIsReady(true);
//       }
//     };

//     loadProducts();
//   }, []);

//   // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π loading
//   if (!isReady) {
//     return (
//       <div 
//         ref={containerRef}
//         className="product-list-container product-list-container--loading"
//         style={{
//           opacity: 1,
//           transform: 'none',
//           animation: 'none'
//         }}
//       >
//         <div className="loading-state">
//           <h2>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞...</h2>
//           <div className="loading-placeholder">
//             –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
//           </div>
//         </div>
//       </div>
//     );
//   }

//   // –ö–æ–≥–¥–∞ –≤—Å–µ –≥–æ—Ç–æ–≤–æ - —Ä–µ–Ω–¥–µ—Ä–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
//   return (
//     <div 
//       ref={containerRef}
//       className="product-list-container product-list-container--ready"
//       style={{
//         opacity: 1,
//         transform: 'none', 
//         animation: 'none'
//       }}
//     >
//       <h2>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</h2>
//       <div className="products-grid">
//         {products.map((product) => (
//           <ProductCard 
//             key={product.product_article} 
//             product={product}
//           />
//         ))}
//       </div>
//       {products.length === 0 && (
//         <div className="no-products">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
//       )}
//     </div>
//   );
// }

// export default ProductList;





























//18_04
// import { useEffect, useState, useRef } from 'react';
// import ProductCard from './ProductCard';
// import "../styles/ProductList.css";

// function ProductList({ user }) {  // –î–æ–±–∞–≤–ª—è–µ–º user –∫–∞–∫ –ø—Ä–æ–ø –¥–ª—è –ª–æ–≥–∏–∫–∏ —Ä–æ–ª–µ–π
//   const [products, setProducts] = useState([]);
//   const [filteredProducts, setFilteredProducts] = useState([]);  // –î–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
//   const [isReady, setIsReady] = useState(false);
//   const [searchQuery, setSearchQuery] = useState('');  // –î–ª—è –ø–æ–∏—Å–∫–∞
//   const [sortBy, setSortBy] = useState('name');  // –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –∏–º–µ–Ω–∏, —Ü–µ–Ω–µ)
//   const [filterCategory, setFilterCategory] = useState('');  // –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
//   const containerRef = useRef(null);
//   const initialized = useRef(false);

//   // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ñ–∏–ª—å—Ç—Ä—ã, –ø–æ–∏—Å–∫, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞)
//   const showControls = user && user.role !== '–≥–æ—Å—Ç—å';  // –¢–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

//   // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –û–î–ò–ù —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
//   useEffect(() => {
//     if (initialized.current) return;
//     initialized.current = true;

//     console.log('üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');

//     const loadProducts = async () => {
//       try {
//         const productsData = await window.api.getProducts();
//         console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', productsData.length, '—Ç–æ–≤–∞—Ä–æ–≤');

//         // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ –≤ –ë–î)
//         setProducts(productsData || []);
//         setFilteredProducts(productsData || []);  // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã

//         // –î–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É DOM
//         requestAnimationFrame(() => {
//           requestAnimationFrame(() => {
//             console.log('üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç');
//             setIsReady(true);
//           });
//         });

//       } catch (error) {
//         console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
//         setProducts([]);
//         setFilteredProducts([]);
//         setIsReady(true);
//       }
//     };

//     loadProducts();
//   }, []);

//   // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ showControls)
//   useEffect(() => {
//     if (!showControls) {
//       setFilteredProducts(products);  // –î–ª—è –≥–æ—Å—Ç–µ–π - –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
//       return;
//     }

//     let filtered = products;

//     // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é
//     if (searchQuery) {
//       filtered = filtered.filter(product =>
//         product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
//         product.description?.toLowerCase().includes(searchQuery.toLowerCase())
//       );
//     }

//     // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É —Ç–æ–≤–∞—Ä–∞ –µ—Å—Ç—å –ø–æ–ª–µ category)
//     if (filterCategory) {
//       filtered = filtered.filter(product => product.category === filterCategory);
//     }

//     // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
//     filtered.sort((a, b) => {
//       if (sortBy === 'name') {
//         return a.name.localeCompare(b.name);
//       } else if (sortBy === 'price') {
//         return a.price - b.price;
//       }
//       return 0;
//     });

//     setFilteredProducts(filtered);
//   }, [products, searchQuery, sortBy, filterCategory, showControls]);

//   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
//   const handleSearchChange = (e) => setSearchQuery(e.target.value);
//   const handleSortChange = (e) => setSortBy(e.target.value);
//   const handleFilterChange = (e) => setFilterCategory(e.target.value);

//   // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π loading
//   if (!isReady) {
//     return (
//       <div 
//         ref={containerRef}
//         className="product-list-container product-list-container--loading"
//         style={{
//           opacity: 1,
//           transform: 'none',
//           animation: 'none'
//         }}
//       >
//         <div className="loading-state">
//           <h2>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞...</h2>
//           <div className="loading-placeholder">
//             –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
//           </div>
//         </div>
//       </div>
//     );
//   }

//   // –ö–æ–≥–¥–∞ –≤—Å–µ –≥–æ—Ç–æ–≤–æ - —Ä–µ–Ω–¥–µ—Ä–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
//   return (
//     <div 
//       ref={containerRef}
//       className="product-list-container product-list-container--ready"
//       style={{
//         opacity: 1,
//         transform: 'none', 
//         animation: 'none'
//       }}
//     >
//       <h2> </h2>

//       {/* –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –ø–æ–∏—Å–∫, —Ñ–∏–ª—å—Ç—Ä—ã, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö */}
//       {showControls && (
//         <div className="controls">
//           <div className="search">
//             <input
//               type="text"
//               placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é..."
//               value={searchQuery}
//               onChange={handleSearchChange}
//             />
//           </div>
//           <div className="filters">
//             <select value={filterCategory} onChange={handleFilterChange}>
//               <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
//               {/* –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å –æ–ø—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: */}
//               <option value="–û–±—É–≤—å">–û–±—É–≤—å</option>
//               <option value="–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã">–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã</option>
//               {/* –ò–ª–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑ products: new Set(products.map(p => p.category)).forEach(...) */}
//             </select>
//           </div>
//           <div className="sort">
//             <select value={sortBy} onChange={handleSortChange}>
//               <option value="name">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</option>
//               <option value="price">–ü–æ —Ü–µ–Ω–µ</option>
//             </select>
//           </div>
//         </div>
//       )}

//       <div className="products-grid">
//         {filteredProducts.map((product) => (
//           <ProductCard 
//             key={product.product_article} 
//             product={product}
//           />
//         ))}
//       </div>
//       {filteredProducts.length === 0 && (
//         <div className="no-products">
//           {products.length === 0 ? '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}
//         </div>
//       )}
//     </div>
//   );
// }

// export default ProductList;













































// import { useEffect, useState, useRef } from 'react';
// import { useNavigate } from 'react-router-dom';  // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
// import ProductCard from './ProductCard';
// import "../styles/ProductList.css";

// function ProductList({ user, setUser }) {  // –î–æ–±–∞–≤—å—Ç–µ setUser –≤ –ø—Ä–æ–ø—Å—ã
//   const [products, setProducts] = useState([]);
//   const [filteredProducts, setFilteredProducts] = useState([]);
//   const [isReady, setIsReady] = useState(false);
//   const [searchQuery, setSearchQuery] = useState('');
//   const [sortBy, setSortBy] = useState('name');
//   const [filterCategory, setFilterCategory] = useState('');
//   const containerRef = useRef(null);
//   const initialized = useRef(false);
//   const navigate = useNavigate();  // –î–æ–±–∞–≤—å—Ç–µ –Ω–∞–≤–∏–≥–∞—Ü–∏—é

//   // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –¥–ª—è –≥–æ—Å—Ç—è
//   const handleLogout = () => {
//     setUser({ role: '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', name: null });
//     navigate('/');  // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
//   };

//   // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
//   const showControls = user && user.role !== '–≥–æ—Å—Ç—å';

//   // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –û–î–ò–ù —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
//   useEffect(() => {
//     if (initialized.current) return;
//     initialized.current = true;

//     console.log('üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');

//     const loadProducts = async () => {
//       try {
//         const productsData = await window.api.getProducts();
//         console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', productsData.length, '—Ç–æ–≤–∞—Ä–æ–≤');

//         setProducts(productsData || []);
//         setFilteredProducts(productsData || []);

//         requestAnimationFrame(() => {
//           requestAnimationFrame(() => {
//             console.log('üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç');
//             setIsReady(true);
//           });
//         });

//       } catch (error) {
//         console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
//         setProducts([]);
//         setFilteredProducts([]);
//         setIsReady(true);
//       }
//     };

//     loadProducts();
//   }, []);

//   // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
//   useEffect(() => {
//     if (!showControls) {
//       setFilteredProducts(products);
//       return;
//     }

//     let filtered = products;

//     if (searchQuery) {
//       filtered = filtered.filter(product =>
//         product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
//         product.description?.toLowerCase().includes(searchQuery.toLowerCase())
//       );
//     }

//     if (filterCategory) {
//       filtered = filtered.filter(product => product.category === filterCategory);
//     }

//     filtered.sort((a, b) => {
//       if (sortBy === 'name') {
//         return a.name.localeCompare(b.name);
//       } else if (sortBy === 'price') {
//         return a.price - b.price;
//       }
//       return 0;
//     });

//     setFilteredProducts(filtered);
//   }, [products, searchQuery, sortBy, filterCategory, showControls]);

//   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
//   const handleSearchChange = (e) => setSearchQuery(e.target.value);
//   const handleSortChange = (e) => setSortBy(e.target.value);
//   const handleFilterChange = (e) => setFilterCategory(e.target.value);

//   // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π loading
//   if (!isReady) {
//     return (
//       <div 
//         ref={containerRef}
//         className="product-list-container product-list-container--loading"
//         style={{
//           opacity: 1,
//           transform: 'none',
//           animation: 'none'
//         }}
//       >
//         <div className="loading-state">
//           <h2>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞...</h2>
//           <div className="loading-placeholder">
//             –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
//           </div>
//         </div>
//       </div>
//     );
//   }

//   // –ö–æ–≥–¥–∞ –≤—Å–µ –≥–æ—Ç–æ–≤–æ - —Ä–µ–Ω–¥–µ—Ä–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
//   return (
//     <div 
//       ref={containerRef}
//       className="product-list-container product-list-container--ready"
//       style={{
//         opacity: 1,
//         transform: 'none', 
//         animation: 'none'
//       }}
//     >
//       {/* –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π header –¥–ª—è –≥–æ—Å—Ç—è */}
//       <div className="header">
//         <div className="user-info">
//           <span className="user-info-label">–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</span>
//           <span className="user-info-role">
//             –ì–æ—Å—Ç—å
//           </span>
//         </div>
//         <div className="logout-container">
//           <button className="logout-btn" onClick={handleLogout}>
//             –í—ã—Ö–æ–¥
//           </button>
//         </div>
//       </div>

//       <h2> </h2>

//       {/* –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –ø–æ–∏—Å–∫, —Ñ–∏–ª—å—Ç—Ä—ã, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö */}
//       {showControls && (
//         <div className="controls">
//           <div className="search">
//             <input
//               type="text"
//               placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é..."
//               value={searchQuery}
//               onChange={handleSearchChange}
//             />
//           </div>
//           <div className="filters">
//             <select value={filterCategory} onChange={handleFilterChange}>
//               <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
//               <option value="–û–±—É–≤—å">–û–±—É–≤—å</option>
//               <option value="–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã">–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã</option>
//             </select>
//           </div>
//           <div className="sort">
//             <select value={sortBy} onChange={handleSortChange}>
//               <option value="name">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</option>
//               <option value="price">–ü–æ —Ü–µ–Ω–µ</option>
//             </select>
//           </div>
//         </div>
//       )}

//       <div className="products-grid">
//         {filteredProducts.map((product) => (
//           <ProductCard 
//             key={product.product_article} 
//             product={product}
//           />
//         ))}
//       </div>
//       {filteredProducts.length === 0 && (
//         <div className="no-products">
//           {products.length === 0 ? '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}
//         </div>
//       )}
//     </div>
//   );
// }

// export default ProductList;










































// 19_41
// import { useEffect, useState, useRef } from 'react';
// import ProductCard from './ProductCard';
// import "../styles/ProductList.css";

// function ProductList({ user }) {  // –î–æ–±–∞–≤–ª—è–µ–º user –∫–∞–∫ –ø—Ä–æ–ø –¥–ª—è –ª–æ–≥–∏–∫–∏ —Ä–æ–ª–µ–π
//   const [products, setProducts] = useState([]);
//   const [filteredProducts, setFilteredProducts] = useState([]);  // –î–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
//   const [isReady, setIsReady] = useState(false);
//   const [searchQuery, setSearchQuery] = useState('');  // –î–ª—è –ø–æ–∏—Å–∫–∞
//   const [sortBy, setSortBy] = useState('name');  // –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –∏–º–µ–Ω–∏, —Ü–µ–Ω–µ)
//   const [filterCategory, setFilterCategory] = useState('');  // –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
//   const containerRef = useRef(null);
//   const initialized = useRef(false);

//   // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ñ–∏–ª—å—Ç—Ä—ã, –ø–æ–∏—Å–∫, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞)
//   const showControls = user && user.role !== '–≥–æ—Å—Ç—å';  // –¢–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

//   // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –û–î–ò–ù —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
//   useEffect(() => {
//     if (initialized.current) return;
//     initialized.current = true;

//     console.log('üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');

//     const loadProducts = async () => {
//       try {
//         const productsData = await window.api.getProducts();
//         console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', productsData.length, '—Ç–æ–≤–∞—Ä–æ–≤');

//         // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ –≤ –ë–î)
//         setProducts(productsData || []);
//         setFilteredProducts(productsData || []);  // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã

//         // –î–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É DOM
//         requestAnimationFrame(() => {
//           requestAnimationFrame(() => {
//             console.log('üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç');
//             setIsReady(true);
//           });
//         });

//       } catch (error) {
//         console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
//         setProducts([]);
//         setFilteredProducts([]);
//         setIsReady(true);
//       }
//     };

//     loadProducts();
//   }, []);

//   // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ showControls)
//   useEffect(() => {
//     if (!showControls) {
//       setFilteredProducts(products);  // –î–ª—è –≥–æ—Å—Ç–µ–π - –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
//       return;
//     }

//     let filtered = products;

//     // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é
//     if (searchQuery) {
//       filtered = filtered.filter(product =>
//         product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
//         product.description?.toLowerCase().includes(searchQuery.toLowerCase())
//       );
//     }

//     // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É —Ç–æ–≤–∞—Ä–∞ –µ—Å—Ç—å –ø–æ–ª–µ category)
//     if (filterCategory) {
//       filtered = filtered.filter(product => product.category === filterCategory);
//     }

//     // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
//     filtered.sort((a, b) => {
//       if (sortBy === 'name') {
//         return a.name.localeCompare(b.name);
//       } else if (sortBy === 'price') {
//         return a.price - b.price;
//       }
//       return 0;
//     });

//     setFilteredProducts(filtered);
//   }, [products, searchQuery, sortBy, filterCategory, showControls]);

//   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
//   const handleSearchChange = (e) => setSearchQuery(e.target.value);
//   const handleSortChange = (e) => setSortBy(e.target.value);
//   const handleFilterChange = (e) => setFilterCategory(e.target.value);

//   // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π loading
//   if (!isReady) {
//     return (
//       <div 
//         ref={containerRef}
//         className="product-list-container product-list-container--loading"
//         style={{
//           opacity: 1,
//           transform: 'none',
//           animation: 'none'
//         }}
//       >
//         <div className="loading-state">
//           <h2>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞...</h2>
//           <div className="loading-placeholder">
//             –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
//           </div>
//         </div>
//       </div>
//     );
//   }

//   // –ö–æ–≥–¥–∞ –≤—Å–µ –≥–æ—Ç–æ–≤–æ - —Ä–µ–Ω–¥–µ—Ä–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
//   return (
//     <div 
//       ref={containerRef}
//       className="product-list-container product-list-container--ready"
//       style={{
//         opacity: 1,
//         transform: 'none', 
//         animation: 'none'
//       }}
//     >
//       <h2> </h2>

//       {/* –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –ø–æ–∏—Å–∫, —Ñ–∏–ª—å—Ç—Ä—ã, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö */}
//       {showControls && (
//         <div className="controls">
//           <div className="search">
//             <input
//               type="text"
//               placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é..."
//               value={searchQuery}
//               onChange={handleSearchChange}
//             />
//           </div>
//           <div className="filters">
//             <select value={filterCategory} onChange={handleFilterChange}>
//               <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
//               {/* –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å –æ–ø—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: */}
//               <option value="–û–±—É–≤—å">–û–±—É–≤—å</option>
//               <option value="–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã">–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã</option>
//               {/* –ò–ª–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑ products: new Set(products.map(p => p.category)).forEach(...) */}
//             </select>
//           </div>
//           <div className="sort">
//             <select value={sortBy} onChange={handleSortChange}>
//               <option value="name">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</option>
//               <option value="price">–ü–æ —Ü–µ–Ω–µ</option>
//             </select>
//           </div>
//         </div>
//       )}

//       <div className="products-grid">
//         {filteredProducts.map((product) => (
//           <ProductCard 
//             key={product.product_article} 
//             product={product}
//           />
//         ))}
//       </div>
//       {filteredProducts.length === 0 && (
//         <div className="no-products">
//           {products.length === 0 ? '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}
//         </div>
//       )}
//     </div>
//   );
// }

// export default ProductList;
































import { useEffect, useState, useRef } from 'react';
import { useNavigate } from 'react-router-dom'; // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
import ProductCard from './ProductCard';
import "../styles/ProductList.css";

function ProductList({ user, setUser }) {  // –î–æ–±–∞–≤–ª—è–µ–º setUser –≤ –ø—Ä–æ–ø—Å—ã
	const [products, setProducts] = useState([]);
	const [filteredProducts, setFilteredProducts] = useState([]);
	const [isReady, setIsReady] = useState(false);
	const [searchQuery, setSearchQuery] = useState('');
	const [sortBy, setSortBy] = useState('name');
	const [filterCategory, setFilterCategory] = useState('');
	const containerRef = useRef(null);
	const initialized = useRef(false);
	const navigate = useNavigate(); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é

	// –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –¥–ª—è –≥–æ—Å—Ç—è
	// const handleLogout = () => {
	//   setUser({ role: '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', name: null });
	//   navigate('/');  // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
	// };

	const handleLogout = () => {
		setUser({ role: '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', name: null });
		// –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–º–µ—Å—Ç–æ history.back()
		navigate('/', { replace: true });
	};



	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	const showControls = user && user.role !== '–≥–æ—Å—Ç—å';

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –û–î–ò–ù —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
	useEffect(() => {
		if (initialized.current) return;
		initialized.current = true;

		console.log('üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');

		const loadProducts = async () => {
			try {
				const productsData = await window.api.getProducts();
				console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', productsData.length, '—Ç–æ–≤–∞—Ä–æ–≤');

				setProducts(productsData || []);
				setFilteredProducts(productsData || []);

				requestAnimationFrame(() => {
					requestAnimationFrame(() => {
						console.log('üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç');
						setIsReady(true);
					});
				});

			} catch (error) {
				console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
				setProducts([]);
				setFilteredProducts([]);
				setIsReady(true);
			}
		};

		loadProducts();
	}, []);




	// –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ showControls)
	// useEffect(() => {
	//   if (!showControls) {
	//     setFilteredProducts(products);
	//     return;
	//   }

	//   let filtered = products;

	//   if (searchQuery) {
	//     filtered = filtered.filter(product =>
	//       product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
	//       product.description?.toLowerCase().includes(searchQuery.toLowerCase())
	//     );
	//   }

	//   if (filterCategory) {
	//     filtered = filtered.filter(product => product.category === filterCategory);
	//   }

	//   filtered.sort((a, b) => {
	//     if (sortBy === 'name') {
	//       return a.name.localeCompare(b.name);
	//     } else if (sortBy === 'price') {
	//       return a.price - b.price;
	//     }
	//     return 0;
	//   });

	//   setFilteredProducts(filtered);
	// }, [products, searchQuery, sortBy, filterCategory, showControls]);




	useEffect(() => {
		if (!showControls) {
			setFilteredProducts(products);
			return;
		}

		let filtered = products;

		if (searchQuery) {
			filtered = filtered.filter(product =>
				product?.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
				product?.description?.toLowerCase().includes(searchQuery.toLowerCase())
			);
		}

		if (filterCategory) {
			filtered = filtered.filter(product => product?.category === filterCategory);
		}

		// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
		filtered.sort((a, b) => {
			if (sortBy === 'name') {
				return (a?.name || '').localeCompare(b?.name || '');
			} else if (sortBy === 'price') {
				return (Number(a?.price) || 0) - (Number(b?.price) || 0);
			}
			return 0;
		});

		setFilteredProducts(filtered);
	}, [products, searchQuery, sortBy, filterCategory, showControls]);





	const handleSearchChange = (e) => setSearchQuery(e.target.value);
	const handleSortChange = (e) => setSortBy(e.target.value);
	const handleFilterChange = (e) => setFilterCategory(e.target.value);

	if (!isReady) {
		return (
			<div
				ref={containerRef}
				className="product-list-container product-list-container--loading"
			>
				<div className="loading-state">
					<h2>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞...</h2>
					<div className="loading-placeholder">
						–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
					</div>
				</div>
			</div>
		);
	}

	return (
		<>

			{user && user.role === '–≥–æ—Å—Ç—å' && (
				<div className="compact-header">
					<div className="user-compact-info">
						<div className="user-name">–ì–æ—Å—Ç—å</div>
						<div className="user-role">–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</div>
					</div>
					<button className="logout-btn-compact" onClick={handleLogout}>
						–í—ã—Ö–æ–¥
					</button>
				</div>
			)}



			<div className="product-list-wrapper">



				<div
					ref={containerRef}
					className="product-list-container product-list-container--ready"
				>
					<h2> </h2>

					{showControls && (
						<div className="controls">
							<div className="search">
								<input
									type="text"
									placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é..."
									value={searchQuery}
									onChange={handleSearchChange}
								/>
							</div>
							<div className="filters">
								<select value={filterCategory} onChange={handleFilterChange}>
									<option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
									<option value="–û–±—É–≤—å">–û–±—É–≤—å</option>
									<option value="–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã">–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã</option>
								</select>
							</div>
							<div className="sort">
								<select value={sortBy} onChange={handleSortChange}>
									<option value="name">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</option>
									<option value="price">–ü–æ —Ü–µ–Ω–µ</option>
								</select>
							</div>
						</div>
					)}

					<div className="products-grid">
						{filteredProducts.map((product) => (
							<ProductCard
								key={product.product_article}
								product={product}
							/>
						))}
					</div>
					{filteredProducts.length === 0 && (
						<div className="no-products">
							{products.length === 0 ? '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}
						</div>
					)}
				</div>
			</div>
		</>
	);
}

export default ProductList;
